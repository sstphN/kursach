package monitor

import (
	"context"
	"fmt"
	"math"

	"strings"
	"sync"
	"time"

	"1333/internal/bots"
	"1333/internal/exchanges/binance"
	"1333/internal/models"
	"1333/internal/utils"
	"1333/persistence"

	log "github.com/sirupsen/logrus"
)

type OIRecord struct {
	Timestamp time.Time
	OI        float64
}

// GlobalMonitor ‚Äî –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
type GlobalMonitor struct {
	store          *persistence.UserStore
	userMetrics    *persistence.UserMetricsStore
	binanceClients map[string]*binance.Client
	SpotClient     *binance.SpotClient
	botManager     *bots.BotManager

	Symbols         []string
	tickerInterval  time.Duration
	stopChan        chan struct{}
	wg              sync.WaitGroup
	alertCooldown   time.Duration
	lastAlertTimes  map[int64]map[models.MetricID]time.Time
	lastAlertMutex  sync.Mutex
	oiHistory       map[string][]OIRecord
	oiHistoryMutex  sync.RWMutex
	symbolUsers     map[string][]int64
	symbolMutex     sync.RWMutex
	refreshInterval time.Duration
}

// NewGlobalMonitor ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
func NewGlobalMonitor(
	store *persistence.UserStore,
	userMetrics *persistence.UserMetricsStore,
	binanceClients map[string]*binance.Client,
	spotCl *binance.SpotClient,
	botManager *bots.BotManager,
) *GlobalMonitor {
	return &GlobalMonitor{
		store:           store,
		userMetrics:     userMetrics,
		binanceClients:  binanceClients,
		SpotClient:      spotCl,
		botManager:      botManager,
		tickerInterval:  1 * time.Minute,
		stopChan:        make(chan struct{}),
		wg:              sync.WaitGroup{},
		alertCooldown:   20 * time.Second, // –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ
		lastAlertTimes:  make(map[int64]map[models.MetricID]time.Time),
		oiHistory:       make(map[string][]OIRecord),
		symbolUsers:     make(map[string][]int64),
		refreshInterval: 10 * time.Minute,
	}
}

// Start ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func (gm *GlobalMonitor) Start(ctx context.Context) {
	gm.wg.Add(1)
	go gm.run(ctx)

	gm.wg.Add(1)
	go gm.autoRefreshSymbols(ctx)

	gm.wg.Add(1)
	go gm.runDeltaMonitoring(ctx)
}

func (gm *GlobalMonitor) run(ctx context.Context) {
	defer gm.wg.Done()

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º OI
	gm.initializeOIHistory(ctx)

	ticker := time.NewTicker(gm.tickerInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Println("GlobalMonitor: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
			return
		case <-ticker.C:
			gm.process(ctx)
		}
	}
}

func (gm *GlobalMonitor) autoRefreshSymbols(ctx context.Context) {
	defer gm.wg.Done()
	ticker := time.NewTicker(gm.refreshInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Println("GlobalMonitor: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤.")
			return
		case <-ticker.C:
			log.Println("GlobalMonitor: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
			gm.InitializeSymbolUsers(ctx)
		}
	}
}

// InitializeSymbolUsers ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º symbolUsers
func (gm *GlobalMonitor) InitializeSymbolUsers(ctx context.Context) {
	users := gm.store.All()
	symbolUserMap := make(map[string][]int64)
	var wg sync.WaitGroup
	var mu sync.Mutex

	for uid, user := range users {
		wg.Add(1)
		go func(uid int64, userSettings *models.UserSettings) {
			defer wg.Done()

			for _, sym := range userSettings.Symbols {
				client, ok := gm.binanceClients[userSettings.Mode]
				if !ok {
					continue
				}
				isTrading, err := client.IsSymbolTrading(ctx, sym)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ %s –¥–ª—è %d: %v", sym, uid, err)
					continue
				}
				if isTrading {
					mu.Lock()
					symbolUserMap[sym] = append(symbolUserMap[sym], uid)
					mu.Unlock()
				}
			}
		}(uid, user)
	}
	wg.Wait()

	gm.symbolMutex.Lock()
	gm.symbolUsers = symbolUserMap
	gm.symbolMutex.Unlock()
	log.Println("GlobalMonitor: symbolUsers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
}

// initializeOIHistory ‚Äî —Å–æ–±–∏—Ä–∞–µ–º OI –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
func (gm *GlobalMonitor) initializeOIHistory(ctx context.Context) {
	log.Println("GlobalMonitor: init OI history.")

	// –°–º–æ—Ç—Ä–∏–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
	gm.symbolMutex.RLock()
	symbols := make([]string, 0, len(gm.symbolUsers))
	for sym := range gm.symbolUsers {
		symbols = append(symbols, sym)
	}
	gm.symbolMutex.RUnlock()

	var wg sync.WaitGroup
	var mu sync.Mutex

	for _, sym := range symbols {
		for mode, client := range gm.binanceClients {
			wg.Add(1)
			go func(sym, mode string, c *binance.Client) {
				defer wg.Done()
				oi, err := c.GetOpenInterest(ctx, sym)
				if err != nil {
					log.Printf("initOIHistory: –û—à–∏–±–∫–∞ OI %s (%s): %v", sym, mode, err)
					return
				}
				record := OIRecord{
					Timestamp: time.Now(),
					OI:        oi,
				}
				mu.Lock()
				gm.oiHistory[sym] = append(gm.oiHistory[sym], record)
				gm.trimOldOI(sym)
				mu.Unlock()
			}(sym, mode, client)
		}
	}
	wg.Wait()
	log.Println("GlobalMonitor: OI history –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
}

// process ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
func (gm *GlobalMonitor) process(ctx context.Context) {
	log.Println("GlobalMonitor: –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

	// –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π OI (append + –æ–±—Ä–µ–∑–∫–∞) –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
	gm.collectCurrentOI(ctx)

	// –î–æ—Å—Ç–∞—ë–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
	allConfigs := gm.userMetrics.AllConfigs()
	for userID, uc := range allConfigs {
		for metricID, ms := range uc.Metrics {
			if !ms.Enabled || ms.TargetBot == "" {
				continue
			}
			if !gm.canSendAlert(userID, metricID) {
				continue
			}

			switch metricID {
			case models.MetricScalpPD:
				scalpClient := gm.binanceClients["scalp"]
				if scalpClient == nil {
					continue
				}
				gm.handleScalpPumpsDumps(ctx, userID, ms, scalpClient)

			case models.MetricIntradayOI:
				intraClient := gm.binanceClients["intraday"]
				if intraClient == nil {
					continue
				}
				gm.handleIntradayOI(ctx, userID, ms, intraClient)

			case models.MetricIntradayPD:
				intraClient := gm.binanceClients["intraday"]
				if intraClient == nil {
					continue
				}
				gm.handleIntradayPumpsDumps(ctx, userID, ms, intraClient)

			case models.MetricSpotVolume:
				// –õ–æ–≥–∏–∫–∞ "–≤ N —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
				if gm.SpotClient == nil {
					continue
				}
				gm.handleSpotVolumeMultiplier(ctx, userID, ms)

			case models.MetricIntradayDelta:
				// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è runDeltaMonitoring
			}
		}
	}

	log.Println("GlobalMonitor: —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à—ë–Ω.")
}

// collectCurrentOI ‚Äî —Å–æ–±–∏—Ä–∞–µ–º OI –≤ oiHistory –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
func (gm *GlobalMonitor) collectCurrentOI(ctx context.Context) {
	gm.symbolMutex.RLock()
	symbols := make([]string, 0, len(gm.symbolUsers))
	for sym := range gm.symbolUsers {
		symbols = append(symbols, sym)
	}
	gm.symbolMutex.RUnlock()

	var wg sync.WaitGroup

	for _, sym := range symbols {
		for mode, client := range gm.binanceClients {
			wg.Add(1)
			go func(sym, mode string, c *binance.Client) {
				defer wg.Done()
				oi, err := c.GetOpenInterest(ctx, sym)
				if err != nil {
					return
				}
				gm.oiHistoryMutex.Lock()
				gm.oiHistory[sym] = append(gm.oiHistory[sym], OIRecord{
					Timestamp: time.Now(),
					OI:        oi,
				})
				gm.trimOldOI(sym)
				gm.oiHistoryMutex.Unlock()
			}(sym, mode, client)
		}
	}
	wg.Wait()
}

// trimOldOI ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –≤—Å—ë —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç
func (gm *GlobalMonitor) trimOldOI(sym string) {
	cutoff := time.Now().Add(-30 * time.Minute)
	arr := gm.oiHistory[sym]
	i := 0
	for ; i < len(arr); i++ {
		if arr[i].Timestamp.After(cutoff) {
			break
		}
	}
	gm.oiHistory[sym] = arr[i:]
}

// handleScalpPumpsDumps ‚Äî –ø–∞–º–ø—ã/–¥–∞–º–ø—ã –¥–ª—è scalp
func (gm *GlobalMonitor) handleScalpPumpsDumps(ctx context.Context, userID int64, ms *models.MetricSettings, client *binance.Client) {
	for _, sym := range ms.Symbols {
		prevClose, currClose, err := client.GetChangePercent(ctx, sym, ms.TimeFrame)
		if err != nil {
			continue
		}
		cp := ((currClose - prevClose) / prevClose) * 100
		if math.Abs(cp) >= ms.Threshold {
			indicator := "üü• Dump"
			if cp > 0 {
				indicator = "üü© Pump"
			}
			priceFmt := utils.FormatPriceWithComma(currClose, 4)
			msg := fmt.Sprintf("%s: `%s`\npriceChange: %.2f%%\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %s USDT",
				indicator, sym, cp, priceFmt)

			gm.botManager.SendToBot(ms.TargetBot, userID, msg)
			gm.fixAlertTime(userID, models.MetricScalpPD)
		}
	}
}

// handleIntradayOI ‚Äî –∏—â–µ–º oi15m, oi30m, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º OI
func (gm *GlobalMonitor) handleIntradayOI(ctx context.Context, userID int64, ms *models.MetricSettings, client *binance.Client) {
	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å—Ä–∞–≤–Ω–∏–º —Ç–µ–∫—É—â–µ–µ OI –∏ oi15m, oi30m
	for _, sym := range ms.Symbols {
		// 1) –ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–∏–π OI
		currentOI, err := client.GetOpenInterest(ctx, sym)
		if err != nil {
			continue
		}

		// 2) –ò—â–µ–º oi15m –∏ oi30m –ø–æ –≤—Ä–µ–º–µ–Ω–∏
		var oi15m, oi30m float64
		now := time.Now()

		gm.oiHistoryMutex.RLock()
		history := gm.oiHistory[sym]
		for _, rec := range history {
			// oi15m: –∏—â–µ–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ [now-16m, now-14m]
			if rec.Timestamp.Before(now.Add(-14*time.Minute)) &&
				rec.Timestamp.After(now.Add(-16*time.Minute)) {
				oi15m = rec.OI
			}
			// oi30m: –∏—â–µ–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ [now-31m, now-29m]
			if rec.Timestamp.Before(now.Add(-29*time.Minute)) &&
				rec.Timestamp.After(now.Add(-31*time.Minute)) {
				oi30m = rec.OI
			}
		}
		gm.oiHistoryMutex.RUnlock()

		// 3) –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö != 0, —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
		var msgBuilder strings.Builder
		shouldAlert := false

		if oi15m != 0 && hasSignificantChange(currentOI, oi15m, ms.Threshold) {
			change15m := ((currentOI - oi15m) / oi15m) * 100
			msgBuilder.WriteString(fmt.Sprintf("OI Change (15m): %.2f%%\n", change15m))
			shouldAlert = true
		}
		if oi30m != 0 && hasSignificantChange(currentOI, oi30m, ms.Threshold) {
			change30m := ((currentOI - oi30m) / oi30m) * 100
			msgBuilder.WriteString(fmt.Sprintf("OI Change (30m): %.2f%%\n", change30m))
			shouldAlert = true
		}

		if shouldAlert {
			// –î–æ–ø–æ–ª–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			msg := fmt.Sprintf("üé∞ OI Alert\n`%s`\n–¢–µ–∫—É—â–∏–π OI=%.2f\n%s", sym, currentOI, msgBuilder.String())
			gm.botManager.SendToBot(ms.TargetBot, userID, msg)
			gm.fixAlertTime(userID, models.MetricIntradayOI)
		}
	}
}

// handleIntradayPumpsDumps ‚Äî –ø—Ä–∏–º–µ—Ä
func (gm *GlobalMonitor) handleIntradayPumpsDumps(ctx context.Context, userID int64, ms *models.MetricSettings, client *binance.Client) {
	for _, sym := range ms.Symbols {
		prevClose, currClose, err := client.GetChangePercent(ctx, sym, ms.TimeFrame)
		if err != nil {
			continue
		}
		cp := ((currClose - prevClose) / prevClose) * 100
		if math.Abs(cp) >= ms.Threshold {
			indic := "üü• Dump"
			if cp > 0 {
				indic = "üü© Pump"
			}
			currFmt := utils.FormatPriceWithComma(currClose, 4)
			msg := fmt.Sprintf("üìà Intraday %s: `%s`\n&Delta;=%.2f%%\nPrice= %s USDT",
				indic, sym, cp, currFmt)
			gm.botManager.SendToBot(ms.TargetBot, userID, msg)
			gm.fixAlertTime(userID, models.MetricIntradayPD)
		}
	}
}

// handleSpotVolume
func (gm *GlobalMonitor) handleSpotVolumeMultiplier(ctx context.Context, userID int64, ms *models.MetricSettings) {
	for _, sym := range ms.Symbols {
		currVol, err1 := gm.SpotClient.GetTradingVolumeUSD(ctx, sym, ms.TimeFrame)
		avgVol, err2 := gm.SpotClient.GetAverageVolume(ctx, sym, ms.TimeFrame, 15) // 15 —Å–≤–µ—á–µ–π
		if err1 != nil || err2 != nil {
			continue
		}
		if avgVol == 0 {
			continue
		}
		if currVol >= ms.Threshold*avgVol {
			if gm.canSendAlert(userID, models.MetricSpotVolume) {
				price, err := gm.binanceClients["intraday"].GetCurrentPrice(ctx, sym)
				if err != nil {
					log.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è %s: %v", sym, err)
					continue
				}
				msg := fmt.Sprintf("üí∞ Spot Volume Alert\n`%s`\n–û–±—ä—ë–º: %.2f (x%.2f –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ %.2f)\n–¶–µ–Ω–∞: %.2f USDT",
					sym, currVol, ms.Threshold, avgVol, price)
				gm.botManager.SendToBot(ms.TargetBot, userID, msg)
				gm.fixAlertTime(userID, models.MetricSpotVolume)
			}
		}
	}
}

// runDeltaMonitoring ‚Äî –¥–µ–ª—å—Ç–∞
func (gm *GlobalMonitor) runDeltaMonitoring(ctx context.Context) {
	defer gm.wg.Done()
	ticker := time.NewTicker(10 * time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Info("runDeltaMonitoring: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (ctx done)")
			return
		case <-ticker.C:
			log.Info("runDeltaMonitoring: —Å–±–æ—Ä –¥–µ–ª—å—Ç—ã...")

			allConfigs := gm.userMetrics.AllConfigs()
			for userID, uc := range allConfigs {
				for metricID, ms := range uc.Metrics {
					if metricID != models.MetricIntradayDelta {
						continue
					}
					if !ms.Enabled || ms.TargetBot == "" {
						continue
					}
					client := gm.binanceClients["intraday"]
					if client == nil {
						continue
					}
					deltaAgg := client.DeltaAggregator()
					if deltaAgg == nil {
						log.Warn("DeltaAggregator is nil for intraday")
						continue
					}
					slots, err := binance.ParseDeltaSlots(ms.TimeFrame)
					if err != nil {
						log.Errorf("Wrong delta interval: %s", ms.TimeFrame)
						continue
					}
					// 1) –ü–æ–ª—É—á–∞–µ–º Top-5 –ø–æ –¥–µ–ª—å—Ç–µ
					topList, err := deltaAgg.GetTopDeltaSymbols(ctx, client, slots, 5, 10)
					if err != nil {
						log.Errorf("GetTopDeltaSymbols err: %v", err)
						return
					}
					// –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É:
					for i := range topList {
						curPrice, errCP := client.GetCurrentPrice(ctx, topList[i].Symbol)
						if errCP == nil {
							topList[i].CurrentPrice = curPrice
						} else {
							log.Warnf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è %s: %v", topList[i].Symbol, errCP)
						}
					}
					// 3) –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
					text := formatDeltaAlertMessage(topList, ms.TimeFrame)
					if gm.canSendAlert(userID, models.MetricIntradayDelta) {
						gm.botManager.SendToBot(ms.TargetBot, userID, text)
						gm.fixAlertTime(userID, models.MetricIntradayDelta)
					}
				}
			}
			log.Info("runDeltaMonitoring: –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
		}
	}
}

// canSendAlert ‚Äî –∫—É–ª–¥–∞—É–Ω
func (gm *GlobalMonitor) canSendAlert(userID int64, metricID models.MetricID) bool {
	gm.lastAlertMutex.Lock()
	defer gm.lastAlertMutex.Unlock()

	if gm.lastAlertTimes[userID] == nil {
		gm.lastAlertTimes[userID] = make(map[models.MetricID]time.Time)
	}
	lastTime, exists := gm.lastAlertTimes[userID][metricID]
	if !exists || time.Since(lastTime) > gm.alertCooldown {
		return true
	}
	return false
}

// fixAlertTime
func (gm *GlobalMonitor) fixAlertTime(userID int64, metricID models.MetricID) {
	gm.lastAlertMutex.Lock()
	defer gm.lastAlertMutex.Unlock()

	if gm.lastAlertTimes[userID] == nil {
		gm.lastAlertTimes[userID] = make(map[models.MetricID]time.Time)
	}
	gm.lastAlertTimes[userID][metricID] = time.Now()
}

// hasSignificantChange ‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
func hasSignificantChange(current, previous, threshold float64) bool {
	if previous == 0 {
		return false
	}
	change := ((current - previous) / previous) * 100
	return math.Abs(change) >= threshold
}

// formatDeltaAlertMessage ‚Äî –¥–µ–ª—å—Ç–∞
func formatDeltaAlertMessage(deltas []binance.SymbolDelta, interval string) string {
	if len(deltas) == 0 {
		return fmt.Sprintf("üìäüî´ *Top 5 Buying coins on Binance Futures in the last %s*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", interval)
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üìäüî´ *Top 5 Buying coins on Binance Futures in the last %s*\n\n", interval))

	for _, d := range deltas {
		// –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Buy/Sell
		buyStr := utils.FormatVolume(d.BuyVolume)
		sellStr := utils.FormatVolume(d.SellVolume)
		priceStr := utils.FormatPriceWithComma(d.CurrentPrice, 4) // –∏–ª–∏ "%.2f"

		// –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
		sb.WriteString(fmt.Sprintf(
			"*%s*\nBuy: %s, Sell: %s\nCurrent Price: %s USDT\n\n",
			d.Symbol, buyStr, sellStr, priceStr,
		))
	}

	return sb.String()
}

func (gm *GlobalMonitor) Wait() {
	gm.wg.Wait()
}

// parseMinutes
func parseMinutes(tf string) (int, error) {
	switch tf {
	case "1m":
		return 1, nil
	case "3m":
		return 3, nil
	case "5m":
		return 5, nil
	case "15m":
		return 15, nil
	case "30m":
		return 30, nil
	case "1h":
		return 60, nil
	case "4h":
		return 240, nil
	case "12h":
		return 720, nil
	case "24h", "1d":
		return 1440, nil
	}
	return 0, fmt.Errorf("unknown tf %s", tf)
}
